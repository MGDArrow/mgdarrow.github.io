import{Q as v,M as S,s}from"./index-246dc7e9.js";const f=v("ServicesStore",{state(){return{services:[]}},actions:{async getServices(){let e=i("ServicesPostArray"),r=i("ServicesDeleteArray");if(S().status)e&&await s.from("SERVICE").insert(e).then(()=>{window.localStorage.removeItem("ServicesPostArray"),this.getServices()}),r&&await s.from("SERVICE").delete().in("name",r).then(()=>{window.localStorage.removeItem("ServicesDeleteArray"),this.getServices()}),await s.from("SERVICE").select("*").order("id",{ascending:!0}).then(t=>{this.services=t.data,a("ServicesBigData",t.data)});else{let t=i("ServicesBigData");e&&e.forEach(c=>{t.push(c)}),r&&r.forEach(c=>{let o=t.findIndex(n=>n.name===c);console.log(o),o!==-1&&t.splice(o,1)}),this.services=t}},async postServices(e){if(S().status)await s.from("SERVICE").insert(e);else if(window.localStorage.getItem("ServicesPostArray")){let r=i("ServicesPostArray");r.push(e),a("ServicesPostArray",r)}else a("ServicesPostArray",[e]);window.navigator.vibrate([300,200,300]),this.getServices()},async putServices(e,r){await s.from("SERVICE").update(e).eq("id",r),this.getServices()},async deleteServices(e){if(S().status)await s.from("SERVICE").delete().eq("id",e.id);else if(window.localStorage.getItem("ServicesDeleteArray")){let r=i("ServicesDeleteArray");r.push(e.name),a("ServicesDeleteArray",r)}else a("ServicesDeleteArray",[e.name]);window.navigator.vibrate([800,200,100]),this.getServices()}}});function i(e){return JSON.parse(window.localStorage.getItem(e))}function a(e,r){window.localStorage.setItem(e,JSON.stringify(r))}export{f as u};
