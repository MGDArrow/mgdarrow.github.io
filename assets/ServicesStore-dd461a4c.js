import{Q as l,M as o,s as t}from"./index-384c84b3.js";const f=l("ServicesStore",{state(){return{services:[]}},actions:{async getServices(){let e=i("ServicesPostArray"),r=i("ServicesDeleteArray");if(o().status)e&&await t.from("SERVICE").insert(e).then(()=>{window.localStorage.removeItem("ServicesPostArray"),this.getServices()}),r&&await t.from("SERVICE").delete().in("name",r).then(()=>{window.localStorage.removeItem("ServicesDeleteArray"),this.getServices()}),await t.from("SERVICE").select("*").order("id",{ascending:!0}).then(s=>{this.services=s.data,a("ServicesBigData",s.data)});else{let s=i("ServicesBigData");e&&e.forEach(c=>{s.push(c)}),r&&r.forEach(c=>{let S=s.findIndex(n=>n.name===c.name);S!==-1&&s.splice(S,1)}),this.services=s}},async postServices(e){if(o().status)await t.from("SERVICE").insert(e);else if(window.localStorage.getItem("ServicesPostArray")){let r=i("ServicesPostArray");r.push(e),a("ServicesPostArray",r)}else a("ServicesPostArray",[e]);this.getServices()},async putServices(e,r){await t.from("SERVICE").update(e).eq("id",r),this.getServices()},async deleteServices(e){if(o().status)await t.from("SERVICE").delete().eq("id",e.id);else if(window.localStorage.getItem("ServicesDeleteArray")){let r=i("ServicesDeleteArray");r.push(e.name),a("ServicesDeleteArray",r)}else a("ServicesDeleteArray",[e.name]);this.getServices()}}});function i(e){return JSON.parse(window.localStorage.getItem(e))}function a(e,r){window.localStorage.setItem(e,JSON.stringify(r))}export{f as u};
